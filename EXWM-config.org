#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./exwm_init.el
* EXWM Configuration
Startup script
#+begin_src shell
#!/bin/sh

exec dbus-launch --exit-with-session emacs -mm --debug-init

#+end_src

Desktop file for the startup menu
#+begin_src shell
  [Desktop Entry]
  Name=EXWM
  Comment=Emacs Window Manager
  Exec=sh /home/aic/emacs-conf/exwm/start-exwm.sh
  TryExec=sh
  Type=Application
  X-LightDM-DesktopName=exwm
  DesktopNames=exwm
#+end_src

-Set this up with *sudo ln -f ~/emacs-conf/exwm/exwm.desktop /usr/share/xsessions/exwm.desktop*
** Setting up EXWM
#+begin_src emacs-lisp
  (defun aic/exwm-update-class()
    (exwm-workspace-rename-buffer exwm-class-name))
  (use-package exwm
    :config
    ;; Set default number of workspaces
    (setq exwm-workspace-number 5)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'aic/exwm-update-class)
    (add-hook 'exwm-init-hook #'aic/start-panel)
    ;; (require 'exwm-systemtray)
    ;; (exwm-systemtray-enable)
    ;; These keys should always pass through to emacs
    (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\M-x
          ?\M-'
          ?\M-&
          ?\M-:
          ?\C-\M-j ;; Buffer list
          ?\C-\ )) ;; Ctrl+Space
    ;; Ctrl+q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings. These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)

          ;; Move between windows
          ([s-left] . windmove-left)
          ([s-right] . windmove-right)
          ([s-up] . windmove-up)
          ([s-down] . windmove-down)

          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ;; Shortcut for Chrome
          ([?\s-g] . (lambda ()
                     (interactive)                   
                     (start-process-shell-command "google-chrome" nil "google-chrome")))

          ;; Shortcut for firefox
          ([?\s-f] . (lambda ()
                     (interactive)
                     (start-process-shell-command "firefox" nil "firefox")))

          ;; Shortcut for Terminator
          ([?\s-t] . (lambda ()
                     (interactive)                   
                     (start-process-shell-command "terminator" nil "terminator")))

          ;; Switch workspace
          ([s-w] . exwm-workspace-switch)
          ([s-n] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))

    (exwm-enable))


#+end_src
** Install polybar
Install dependencies
#+begin_src shell
  # Main dependencies
  sudo apt install build-essential git cmake cmake-data pkg-config python3-sphinx python3-packaging libuv1-dev libcairo2-dev libxcb1-dev libxcb-util0-dev libxcb-randr0-dev libxcb-composite0-dev python3-xcbgen xcb-proto libxcb-image0-dev libxcb-ewmh-dev libxcb-icccm4-dev

  # Optional dependencies
  sudo apt install libxcb-xkb-dev libxcb-xrm-dev libxcb-cursor-dev libasound2-dev libpulse-dev i3-wm libjsoncpp-dev libmpdclient-dev libcurl4-openssl-dev libnl-genl-3-dev

#+end_src

Clone the repo
#+begin_src shell
  # Make sure to type the `git' command as-is to clone all git submodules too
  cd ~/code
  git clone --recursive https://github.com/polybar/polybar
  cd polybar
#+end_src

Make the project
#+begin_src shell
  mkdir ~/code/polybar/build
  cd ~/code/polybar/build
  cmake ..
  make -j$(nproc)
  # Optional. This will install the polybar executable in /usr/local/bin
  sudo make install
#+end_src

Uninstalling
#+begin_src shell
  cd ~/code/polybar/build
  sudo make uninstall
#+end_src

Extra fonts for configuration
#+begin_src shell
  sudo apt install fonts-font-awesome fonts-material-design-icons-iconfont
#+end_src

Polybar config
#+begin_src shell :tangle /home/aic/.config/polybar/config :mkdirp yes
  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = 0
  margin-bottom = 0

  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  monitor=${env:MONITOR:}
  width = 100%
  height = 20
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 5
  padding-left = 1
  padding-right = 1

  module-margin = 1

  font-0 = "Cantarell:size=15:weight=bold;2"
  font-1 = "Font Awesome:size=10;2"
  font-2 = "Material Icons:size=15;5"
  font-3 = "Fira Mono:size=10;-3"

  modules-right = cpu temperature battery date

  tray-position = right
  tray-padding = 2
  tray-maxsize = 28

  cursor-click = pointer
  cursor-scroll = ns-resize

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  format-underline = ${colors.underline-1}
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇

  [module/date]
  type = internal/date
  interval = 5

  date = "%a %b %e"
  date-alt = "%A %B %d %Y"

  time = %H:%M:%S
  time-alt = %H:%M:%S

  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}

  label = %date% %time%

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M

  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  format-charging-underline = ${colors.underline-1}

  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}

  format-full = <ramp-capacity> <label-full>
  format-full-underline = ${self.format-charging-underline}

  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 

  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60

  format = <label>
  format-underline = ${colors.underline-1}
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}

  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}
#+end_src

Script to initialise polybar in several monitors (used as reference for the next emacs-lisp script)
#+begin_src shell :tangle no
  for m in $(xrandr --query | grep " connected" | cut -d" " -f1); do
      MONITOR=$m polybar --reload panel &
  done

#+end_src

Launch polybar at start:

#+begin_src emacs-lisp
  (defvar aic/polybar-processes nil
    "Holds the processes of the running Polybar instance, if any")
  (defun aic/get_monitors ()
    (split-string (shell-command-to-string "xrandr --query | grep \" connected\" | cut -d\" \" -f1")))
  (defun aic/kill-panel ()
    (interactive)
      (ignore-errors
        (dolist (item aic/polybar-processes)
          (message "Killing process %s" item)
          (kill-process item)))
      (setq aic/polybar-processes nil))


  (defun aic/start-panel ()
    (interactive)
    (aic/kill-panel)
    (setq aic/polybar-processes (aic/get_monitors))
    (dolist (item aic/polybar-processes)
      (while (get-process item)
        (sleep-for 0 1))
      (message "Starting polybar %s" item)
      (start-process-shell-command item nil (format "MONITOR=%s polybar --reload panel" item))))

#+end_src

#+RESULTS:


** SSH with EXWM
It seems that the ssh-agent process is working correctly with EXWM but without the GNOME-keyring it does not have added the keys in ~/.ssh. The solution should be to add *ssh-add (keys needed)* somewhere in the emacs initialization.
** Multi-screen with exwm-randr
We will distribute the windows for the available outputs (if there is no output all will go to the primary/only one)
#+begin_src emacs-lisp
  (defun aic/distribute_windows ()
    (setq all_monitors (aic/get_monitors))
    (print (format "All monitors: %s" all_monitors))
    (if (cdr all_monitors)
      (progn
        (print "Multiple monitors")
        (setq first 1)
        (setq monitor_list nil)
        (dolist (window '(5 4 3 2 1))
          (if first
              (progn
                (push (car (cdr all_monitors)) monitor_list)
                (push window monitor_list)
                (setq first nil))
            (progn
              (push (car all_monitors) monitor_list)
              (push window monitor_list)
              (setq first 1)
              )
            )
          )
        (require 'exwm-randr)
        (setq exwm-randr-workspace-monitor-plist nil)
        (setq exwm-randr-workspace-monitor-plist monitor_list)
        (print (format "Monitor exit list: %s" exwm-randr-workspace-output-plist))
        (exwm-randr-enable)
        )
      )
    )
  (aic/distribute_windows)

#+end_src

