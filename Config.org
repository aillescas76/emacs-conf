#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./common_init.el
* Current init.el content
Copy this to the *.emacs.d/init.el* file:
#+begin_src  emacs-lisp :tangle no
;; my common emacs settings are here
(load (expand-file-name "~/emacs-conf/common_init.el"))
#+end_src

* Startup Performance
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun aic/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'aic/display-startup-time)
#+end_src
* Package Init Configuration
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)

#+end_src
* Basic UI Configuration

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)   

  (scroll-bar-mode -1)               ; Disable visible scroolbar
  (tool-bar-mode -1)                 ; Disable the toolbar 
  (tooltip-mode -1)                  ; Disable tooltips
  (set-fringe-mode -1)               ; Give some breathing room


  (menu-bar-mode -1)                 ; Disable menu bar
  (setq visible-bell t)              ; Set up the visible bell

#+end_src
Revert buffers if the information changes on disk

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t) 
#+end_src
Improve scrolling.

#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX
#+end_src


Set frame transparency and maximize windows by default.

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Don't warn for large files (shows up when launching videos)


#+begin_src emacs-lisp
  (setq large-file-warning-threshold nil)
#+end_src

*Don't warn for following symlinked files*

#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

*Enable proper Unicode glyph support*

#+begin_src emacs-lisp
  (defun aic/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                           (lambda (i) (string-equal (car i) block-name))
                           unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
      (lambda (block-name)
        (aic/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
      '("Dingbats"
        "Emoticons"
        "Miscellaneous Symbols and Pictographs"
        "Transport and Map Symbols"))
    (unicode-fonts-setup))

#+end_src

* UI Configuration
** Completion with Vertico and marginalia

#+begin_src emacs-lisp
  ;; Completion with Vertico
  (defun aic/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
        (backward-kill-word arg)))

  (use-package vertico
    :bind (:map vertico-map
           ("C-n" . vertico-next)
           ("C-p" . vertico-previous)
           ("C-q" . vertico-exit)
           :map minibuffer-local-map
           ("M-h" . aic/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))
  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** Consult Commands
Consult provides a lot of useful completion commands similar to Ivy's Counsel.

#+begin_src emacs-lisp
  (defun aic/get-project-root ()
    (when (fboundp 'projectile-project-root)
      (projectile-project-root)))

  (use-package consult
    :ensure t
    :demand t
    :bind (("C-s" . consult-line)
           ("C-M-l" . consult-imenu)
           ("C-M-j" . persp-switch-to-buffer*)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    :custom
    (consult-project-root-function #'aic/get-project-root)
    (completion-in-region-function #'consult-completion-in-region))


#+end_src

** Completion Actions with Embark

#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind (("C-S-a" . embark-act)
           :map minibuffer-local-map
           ("C-d" . embark-act))
    :config

    ;; Show Embark actions via which-key
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

   (use-package embark-consult
     :after (embark consult)
     :demand t
     :hook
     (embark-collect-mode . embark-consult-preview-minor-mode))

#+end_src

** Themes and which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package nerd-icons)
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))
  ;; This package requires the fonts included with all-the-icons Run *M-x all-the-icons-install-fonts*
  (use-package doom-modeline
    :ensure t
    :after eshell
    :hook  (after-init . doom-modeline-mode)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-with 6)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))
  (doom-modeline-mode)
  (use-package doom-themes
    :init (load-theme 'doom-dracula t))
  ;;(load-theme 'doom-palenight t)

#+end_src

** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key)
  ([remap describe-symbol] . helpful-symbol))

#+end_src
** Window navigation shorcuts
#+begin_src emacs-lisp
  (global-set-key (kbd "S-<left>")  'windmove-left)
  (global-set-key (kbd "S-<right>") 'windmove-right)
  (global-set-key (kbd "S-<up>")    'windmove-up)
  (global-set-key (kbd "S-<down>")  'windmove-down)
#+end_src

* Font configuration

#+begin_src emacs-lisp
;; install previously with sudo apt install fonts-firacode fonts-cantarell
(set-face-attribute 'default nil :font "Fira Code Retina" :height 120)
;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 120)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height 120 :weight 'regular)

#+end_src

#+RESULTS:

* Org Mode
** Better Font Faces

#+begin_src emacs-lisp
(defun aic/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src
** Basic Configuration

#+begin_src emacs-lisp
  (defun aic/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . aic/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
	  '("~/emacs-conf/OrgFiles/Tasks.org"
	    "~/emacs-conf/OrgFiles/Habits.org"
	    "~/emacs-conf/OrgFiles/Birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	(sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
	("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
	 ; Put mutually exclusive tags here
	 (:endgroup)
	 ("@errand" . ?E)
	 ("@home" . ?H)
	 ("@work" . ?W)
	 ("agenda" . ?a)
	 ("planning" . ?p)
	 ("publish" . ?P)
	 ("batch" . ?b)
	 ("note" . ?n)
	 ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
	(todo "NEXT"
	  ((org-agenda-overriding-header "Next Tasks")))
	(tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
	  ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
	(org-agenda-max-todos 20)
	(org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
	      ((org-agenda-overriding-header "Waiting on External")
	       (org-agenda-files org-agenda-files)))
	(todo "REVIEW"
	      ((org-agenda-overriding-header "In Review")
	       (org-agenda-files org-agenda-files)))
	(todo "PLAN"
	      ((org-agenda-overriding-header "In Planning")
	       (org-agenda-todo-list-sublevels nil)
	       (org-agenda-files org-agenda-files)))
	(todo "BACKLOG"
	      ((org-agenda-overriding-header "Project Backlog")
	       (org-agenda-todo-list-sublevels nil)
	       (org-agenda-files org-agenda-files)))
	(todo "READY"
	      ((org-agenda-overriding-header "Ready for Work")
	       (org-agenda-files org-agenda-files)))
	(todo "ACTIVE"
	      ((org-agenda-overriding-header "Active Projects")
	       (org-agenda-files org-agenda-files)))
	(todo "COMPLETED"
	      ((org-agenda-overriding-header "Completed Projects")
	       (org-agenda-files org-agenda-files)))
	(todo "CANC"
	      ((org-agenda-overriding-header "Cancelled Projects")
	       (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
	("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
	     "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

	("j" "Journal Entries")
	("jj" "Journal" entry
	     (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	     "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	     ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
	     :clock-in :clock-resume
	     :empty-lines 1)
	("jm" "Meeting" entry
	     (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	     "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	     :clock-in :clock-resume
	     :empty-lines 1)

	("w" "Workflows")
	("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	     "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

	("m" "Metrics Capture")
	("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
	 "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (aic/org-font-setup))
#+end_src
** Nicer Heading Bullets
   #+begin_src emacs-lisp
     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
   #+end_src
** Center Org Buffers
   #+begin_src emacs-lisp
     (defun aic/org-mode-visual-fill ()
       (setq visual-fill-column-width 100
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package visual-fill-column
       :hook (org-mode . aic/org-mode-visual-fill))

   #+end_src
** Structure Templates

  #+begin_src emacs-lisp
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
  #+end_src

** Configure Babel languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp
  ;; Automatically tangle our Config.org file when we save it
  (defun aic/org-babel-tangle-config()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/emacs-conf/Config.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'aic/org-babel-tangle-config)))
#+end_src

** Install org-roam
We need gcc or clang installed
#+begin_src emacs-lisp
  (use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-completion-everywhere t)
  (org-roam-directory "~/emacs-config/RoamNotes")
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point))
  )
#+end_src
* Development

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    ;:custom ((projectile-completion-system 'vertico-mode))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/code")
      (setq projectile-project-search-path '("~/code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src
Tab Widths
Default to an indentation size of 2 spaces since it's the norm for pretty much every language I use.

#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
#+end_src

Use spaces instead of tabs for indentation

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

Undo tree
#+begin_src emacs-lisp
  (use-package undo-tree)
  (global-undo-tree-mode)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src
** Language Server Support
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :ensure t
       :commands lsp
       :hook ((typescript-mode js2-mode web-mode) . lsp)
       :bind (:map lsp-mode-map
              ("TAB" . completion-at-point))
       :custom
       (lsp-headerline-breadcrumb-enable nil)
       (lsp-eldoc-enable-hover nil)
       (lsp-signature-auto-activate nil)
       (lsp-completion-enable t)
      )
   #+end_src

** lsp-python-ms
#+begin_src emacs-lisp
(use-package lsp-python-ms
  :ensure t
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
#+end_src
** lsp-ui

   lsp-ui is a set of UI enhancements built on top of lsp-mode which make Emacs feel even more like an IDE. Check out the screenshots on the lsp-ui homepage (linked at the beginning of this paragraph) to see examples of what it can do.
   #+begin_src emacs-lisp
     (use-package lsp-ui
       :ensure t
       :hook (lsp-mode . lsp-ui-mode)
       :config
       (setq lsp-ui-sideline-enable t)
       (setq lsp-ui-sideline-show-hover nil)
       (setq lsp-ui-doc-position 'bottom)
       (lsp-ui-doc-show))
   #+end_src
** pyvenv
  #+begin_src emacs-lisp
    (use-package pyvenv
      :ensure t
      :defer t
      :diminish t
      :config
      (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
	(pyvenv-mode t))

  #+end_src
** pyright
  #+begin_src emacs-lisp
(use-package lsp-jedi
  :after lsp-mode
  :ensure t)

  #+end_src
** flycheck
  #+begin_src emacs-lisp
    (use-package flycheck
      :init
      (global-flycheck-mode))
  #+end_src

* Enable EXWM
Only if we set the special flag file "enable_exwm"

#+begin_src emacs-lisp
(if (file-exists-p "~/emacs-conf/enable-exwm")
  (load (expand-file-name "~/emacs-conf/exwm_init.el"))
  (progn
    (print "No EXWM config in this system")
    (global-set-key (kbd "M-<up>") 'windmove-up)
    (global-set-key (kbd "M-<down>") 'windmove-down)
    (global-set-key (kbd "M-<left>") 'windmove-left)
    (global-set-key (kbd "M-<right>") 'windmove-right)))
#+end_src
