#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./common_init.el
* Current init.el content
Copy this to the *.emacs.d/init.el* file:
#+begin_src  emacs-lisp :tangle no
;; my common emacs settings are here
(load (expand-file-name "~/emacs-conf/common_init.el"))
#+end_src

* Startup Performance
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun aic/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'aic/display-startup-time)
#+end_src
* Package Init Configuration
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)

#+end_src
* Basic UI Configuration

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)   

  (scroll-bar-mode -1)               ; Disable visible scroolbar
  (tool-bar-mode -1)                 ; Disable the toolbar 
  (tooltip-mode -1)                  ; Disable tooltips
  (set-fringe-mode -1)               ; Give some breathing room


  (menu-bar-mode -1)                 ; Disable menu bar
  (setq visible-bell t)              ; Set up the visible bell

#+end_src

Improve scrolling.

#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX
#+end_src


Set frame transparency and maximize windows by default.

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Don't warn for large files (shows up when launching videos)


#+begin_src emacs-lisp
  (setq large-file-warning-threshold nil)
#+end_src

*Don't warn for following symlinked files*

#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

*Enable proper Unicode glyph support*

#+begin_src emacs-lisp
  (defun aic/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                           (lambda (i) (string-equal (car i) block-name))
                           unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
      (lambda (block-name)
        (aic/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
      '("Dingbats"
        "Emoticons"
        "Miscellaneous Symbols and Pictographs"
        "Transport and Map Symbols"))
    (unicode-fonts-setup))

#+end_src

* UI Configuration
** Completion with Vertico and marginalia

#+begin_src emacs-lisp
  ;; Completion with Vertico
  (defun aic/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
        (backward-kill-word arg)))

  (use-package vertico
    :bind (:map vertico-map
           ("C-n" . vertico-next)
           ("C-p" . vertico-previous)
           ("C-q" . vertico-exit)
           :map minibuffer-local-map
           ("M-h" . aic/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))
  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** Consult Commands
Consult provides a lot of useful completion commands similar to Ivy's Counsel.

#+begin_src emacs-lisp
  (defun aic/get-project-root ()
    (when (fboundp 'projectile-project-root)
      (projectile-project-root)))

  (use-package consult
    :ensure t
    :demand t
    :bind (("C-s" . consult-line)
           ("C-M-l" . consult-imenu)
           ("C-M-j" . persp-switch-to-buffer*)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    :custom
    (consult-project-root-function #'aic/get-project-root)
    (completion-in-region-function #'consult-completion-in-region))


#+end_src

** Completion Actions with Embark

#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind (("C-S-a" . embark-act)
           :map minibuffer-local-map
           ("C-d" . embark-act))
    :config

    ;; Show Embark actions via which-key
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

   (use-package embark-consult
     :after (embark consult)
     :demand t
     :hook
     (embark-collect-mode . embark-consult-preview-minor-mode))

#+end_src

** Themes and which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package all-the-icons)
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))
  ;; This package requires the fonts included with all-the-icons Run *M-x all-the-icons-install-fonts*
  (use-package doom-modeline
    :ensure t
    :after eshell
    :hook  (after-init . doom-modeline-mode)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-with 6)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))
  (doom-modeline-mode)
  (use-package doom-themes
    :init (load-theme 'doom-dracula t))
  ;;(load-theme 'doom-palenight t)

#+end_src

** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key)
  ([remap describe-symbol] . helpful-symbol))

#+end_src
** Window navigation shorcuts
#+begin_src emacs-lisp
  (global-set-key (kbd "s-<left>")  'windmove-left)
  (global-set-key (kbd "s-<right>") 'windmove-right)
  (global-set-key (kbd "s-<up>")    'windmove-up)
  (global-set-key (kbd "s-<down>")  'windmove-down)
#+end_src

* Font configuration

#+begin_src emacs-lisp
;; install previously with sudo apt intall fonts-firacode fonts-cantarell
(set-face-attribute 'default nil :font "Fira Code Retina" :height 120)
;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 120)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height 120 :weight 'regular)

#+end_src

#+RESULTS:

* Org Mode
** Better Font Faces

#+begin_src emacs-lisp
(defun aic/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src
** Basic Configuration

#+begin_src emacs-lisp
  (defun aic/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . aic/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
	  '("~/emacs-conf/OrgFiles/Tasks.org"
	    "~/emacs-conf/OrgFiles/Habits.org"
	    "~/emacs-conf/OrgFiles/Birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	(sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
	("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
	 ; Put mutually exclusive tags here
	 (:endgroup)
	 ("@errand" . ?E)
	 ("@home" . ?H)
	 ("@work" . ?W)
	 ("agenda" . ?a)
	 ("planning" . ?p)
	 ("publish" . ?P)
	 ("batch" . ?b)
	 ("note" . ?n)
	 ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
	(todo "NEXT"
	  ((org-agenda-overriding-header "Next Tasks")))
	(tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
	  ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
	(org-agenda-max-todos 20)
	(org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
	      ((org-agenda-overriding-header "Waiting on External")
	       (org-agenda-files org-agenda-files)))
	(todo "REVIEW"
	      ((org-agenda-overriding-header "In Review")
	       (org-agenda-files org-agenda-files)))
	(todo "PLAN"
	      ((org-agenda-overriding-header "In Planning")
	       (org-agenda-todo-list-sublevels nil)
	       (org-agenda-files org-agenda-files)))
	(todo "BACKLOG"
	      ((org-agenda-overriding-header "Project Backlog")
	       (org-agenda-todo-list-sublevels nil)
	       (org-agenda-files org-agenda-files)))
	(todo "READY"
	      ((org-agenda-overriding-header "Ready for Work")
	       (org-agenda-files org-agenda-files)))
	(todo "ACTIVE"
	      ((org-agenda-overriding-header "Active Projects")
	       (org-agenda-files org-agenda-files)))
	(todo "COMPLETED"
	      ((org-agenda-overriding-header "Completed Projects")
	       (org-agenda-files org-agenda-files)))
	(todo "CANC"
	      ((org-agenda-overriding-header "Cancelled Projects")
	       (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
	("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
	     "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

	("j" "Journal Entries")
	("jj" "Journal" entry
	     (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	     "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	     ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
	     :clock-in :clock-resume
	     :empty-lines 1)
	("jm" "Meeting" entry
	     (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	     "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	     :clock-in :clock-resume
	     :empty-lines 1)

	("w" "Workflows")
	("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	     "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

	("m" "Metrics Capture")
	("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
	 "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (aic/org-font-setup))
#+end_src
** Nicer Heading Bullets
   #+begin_src emacs-lisp
     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
   #+end_src
** Center Org Buffers
   #+begin_src emacs-lisp
     (defun aic/org-mode-visual-fill ()
       (setq visual-fill-column-width 100
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package visual-fill-column
       :hook (org-mode . aic/org-mode-visual-fill))

   #+end_src
** Structure Templates

  #+begin_src emacs-lisp
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
  #+end_src

** Configure Babel languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp
  ;; Automatically tangle our Config.org file when we save it
  (defun aic/org-babel-tangle-config()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/emacs-conf/Config.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'aic/org-babel-tangle-config)))
#+end_src

** Install org-roam
We need gcc or clang installed
#+begin_src emacs-lisp
  (use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-completion-everywhere t)
  (org-roam-directory "~/emacs-config/RoamNotes")
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point))
  )
#+end_src
* Development

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    ;:custom ((projectile-completion-system 'vertico-mode))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/code")
      (setq projectile-project-search-path '("~/code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src
Tab Widths
Default to an indentation size of 2 spaces since it's the norm for pretty much every language I use.

#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
#+end_src

Use spaces instead of tabs for indentation

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

Undo tree
#+begin_src emacs-lisp
  (use-package undo-tree)
  (global-undo-tree-mode)
#+end_src
** Language Server Support
   #+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands lsp
  :hook ((typescript-mode js2-mode web-mode) . lsp)
  :bind (:map lsp-mode-map
         ("TAB" . completion-at-point))
  :custom (lsp-headerline-breadcrumb-enable nil))
   #+end_src


** lsp-ui

   lsp-ui is a set of UI enhancements built on top of lsp-mode which make Emacs feel even more like an IDE. Check out the screenshots on the lsp-ui homepage (linked at the beginning of this paragraph) to see examples of what it can do.
   #+begin_src emacs-lisp
     (use-package lsp-ui
       :ensure t
       :hook (lsp-mode . lsp-ui-mode)
       :config
       (setq lsp-ui-sideline-enable t)
       (setq lsp-ui-sideline-show-hover nil)
       (setq lsp-ui-doc-position 'bottom)
       (lsp-ui-doc-show))
   #+end_src

* Enable EXWM
Startup script
#+begin_src shell
#!/bin/sh

exec dbus-launch --exit-with-session emacs -mm --debug-init

#+end_src

Desktop file for the startup menu
#+begin_src shell
  [Desktop Entry]
  Name=EXWM
  Comment=Emacs Window Manager
  Exec=sh /home/aic/emacs-conf/exwm/start-exwm.sh
  TryExec=sh
  Type=Application
  X-LightDM-DesktopName=exwm
  DesktopNames=exwm
#+end_src

-Set this up with *sudo ln -f ~/emacs-conf/exwm/exwm.desktop /usr/share/xsessions/exwm.desktop*
** Setting up EXWM
#+begin_src emacs-lisp
  (defun aic/exwm-update-class()
    (exwm-workspace-rename-buffer exwm-class-name))
  (use-package exwm
    :config
    ;; Set default number of workspaces
    (setq exwm-workspace-number 5)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'aic/exwm-update-class)
    (add-hook 'exwm-init-hook #'aic/start-panel)
    ;; (require 'exwm-systemtray)
    ;; (exwm-systemtray-enable)
    ;; These keys should always pass through to emacs
    (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\M-x
          ?\M-'
          ?\M-&
          ?\M-:
          ?\C-\M-j ;; Buffer list
          ?\C-\ )) ;; Ctrl+Space
    ;; Ctrl+q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings. These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)

          ;; Move between windows
          ([s-left] . windmove-left)
          ([s-right] . windmove-right)
          ([s-up] . windmove-up)
          ([s-down] . windmove-down)

          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ;; Shortcut for Chrome
          ([?\s-g] . (lambda ()
                     (interactive)                   
                     (start-process-shell-command "google-chrome" nil "google-chrome")))

          ;; Shortcut for firefox
          ([?\s-f] . (lambda ()
                     (interactive)
                     (start-process-shell-command "firefox" nil "firefox")))

          ;; Shortcut for Terminator
          ([?\s-t] . (lambda ()
                     (interactive)                   
                     (start-process-shell-command "terminator" nil "terminator")))

          ;; Switch workspace
          ([s-w] . exwm-workspace-switch)
          ([s-n] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))

    (exwm-enable))


#+end_src
** Install polybar
Install dependencies
#+begin_src shell
  # Main dependencies
  sudo apt install build-essential git cmake cmake-data pkg-config python3-sphinx python3-packaging libuv1-dev libcairo2-dev libxcb1-dev libxcb-util0-dev libxcb-randr0-dev libxcb-composite0-dev python3-xcbgen xcb-proto libxcb-image0-dev libxcb-ewmh-dev libxcb-icccm4-dev

  # Optional dependencies
  sudo apt install libxcb-xkb-dev libxcb-xrm-dev libxcb-cursor-dev libasound2-dev libpulse-dev i3-wm libjsoncpp-dev libmpdclient-dev libcurl4-openssl-dev libnl-genl-3-dev

#+end_src

Clone the repo
#+begin_src shell
  # Make sure to type the `git' command as-is to clone all git submodules too
  cd ~/code
  git clone --recursive https://github.com/polybar/polybar
  cd polybar
#+end_src

Make the project
#+begin_src shell
  mkdir ~/code/polybar/build
  cd ~/code/polybar/build
  cmake ..
  make -j$(nproc)
  # Optional. This will install the polybar executable in /usr/local/bin
  sudo make install
#+end_src

Uninstalling
#+begin_src shell
  cd ~/code/polybar/build
  sudo make uninstall
#+end_src

Extra fonts for configuration
#+begin_src shell
  sudo apt install fonts-font-awesome fonts-material-design-icons-iconfont
#+end_src

Polybar config
#+begin_src shell :tangle /home/aic/.config/polybar/config :mkdirp yes
  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = 0
  margin-bottom = 0

  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  monitor=${env:MONITOR:}
  width = 100%
  height = 20
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 5
  padding-left = 1
  padding-right = 1

  module-margin = 1

  font-0 = "Cantarell:size=15:weight=bold;2"
  font-1 = "Font Awesome:size=10;2"
  font-2 = "Material Icons:size=15;5"
  font-3 = "Fira Mono:size=10;-3"

  modules-right = cpu temperature battery date

  tray-position = right
  tray-padding = 2
  tray-maxsize = 28

  cursor-click = pointer
  cursor-scroll = ns-resize

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  format-underline = ${colors.underline-1}
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇

  [module/date]
  type = internal/date
  interval = 5

  date = "%a %b %e"
  date-alt = "%A %B %d %Y"

  time = %H:%M:%S
  time-alt = %H:%M:%S

  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}

  label = %date% %time%

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M

  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  format-charging-underline = ${colors.underline-1}

  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}

  format-full = <ramp-capacity> <label-full>
  format-full-underline = ${self.format-charging-underline}

  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 

  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60

  format = <label>
  format-underline = ${colors.underline-1}
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}

  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}
#+end_src

Script to initialise polybar in several monitors (used as reference for the next emacs-lisp script)
#+begin_src shell :tangle no
  for m in $(xrandr --query | grep " connected" | cut -d" " -f1); do
      MONITOR=$m polybar --reload panel &
  done

#+end_src

Launch polybar at start:

#+begin_src emacs-lisp
  (defvar aic/polybar-processes nil
    "Holds the processes of the running Polybar instance, if any")
  (defun aic/get_monitors ()
    (split-string (shell-command-to-string "xrandr --query | grep \" connected\" | cut -d\" \" -f1")))
  (defun aic/kill-panel ()
    (interactive)
      (ignore-errors
        (dolist (item aic/polybar-processes)
          (message "Killing process %s" item)
          (kill-process item)))
      (setq aic/polybar-processes nil))


  (defun aic/start-panel ()
    (interactive)
    (aic/kill-panel)
    (setq aic/polybar-processes (aic/get_monitors))
    (dolist (item aic/polybar-processes)
      (while (get-process item)
        (sleep-for 0 1))
      (message "Starting polybar %s" item)
      (start-process-shell-command item nil (format "MONITOR=%s polybar --reload panel" item))))

#+end_src

#+RESULTS:


** SSH with EXWM
It seems that the ssh-agent process is working correctly with EXWM but without the GNOME-keyring it does not have added the keys in ~/.ssh. The solution should be to add *ssh-add (keys needed)* somewhere in the emacs initialization.
** Multi-screen with exwm-randr
We will distribute the windows for the available outputs (if there is no output all will go to the primary/only one)
#+begin_src emacs-lisp
  (defun aic/distribute_windows ()
    (setq all_monitors (aic/get_monitors))
    (print (format "All monitors: %s" all_monitors))
    (if (cdr all_monitors)
      (progn
        (print "Multiple monitors")
        (setq first 1)
        (setq monitor_list nil)
        (dolist (window '(5 4 3 2 1))
          (if first
              (progn
                (push (car (cdr all_monitors)) monitor_list)
                (push window monitor_list)
                (setq first nil))
            (progn
              (push (car all_monitors) monitor_list)
              (push window monitor_list)
              (setq first 1)
              )
            )
          )
        (require 'exwm-randr)
        (setq exwm-randr-workspace-monitor-plist nil)
        (setq exwm-randr-workspace-monitor-plist monitor_list)
        (print (format "Monitor exit list: %s" exwm-randr-workspace-output-plist))
        (exwm-randr-enable)
        )
      )
    )
  (aic/distribute_windows)

#+end_src

